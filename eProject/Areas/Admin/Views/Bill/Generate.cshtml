@model eProject.Models.Bill
@using eProject.Helpers
@{
    ViewBag.Title = "Generate bill";
}
@section styles {
    <link rel="stylesheet" href="~/Content/Css/AdminCss/Bill/Generate.css" />
}
@section scripts {
    <script src="~/Content/Js/Bill/Bill.js"></script>
}

<h1 class="page-title">
    <i class="fa-solid fa-money-bill"></i>
    Generate bill for account
</h1>

<div class="dataBox">
    <div class="row">
        <div class="col-xl-6">
            <div class="bill">
                <p class="bill-lineStrong">
                    Account ID: @ViewBag.account.AccountID
                </p>
                <p class="bill-line">
                    <i class="fa-solid fa-user"></i>
                    Customer: <span class="bill-lineValue">@ViewBag.customer.Fullname.ToUpper()</span>
                </p>
                <p class="bill-line">
                    <i class="fa-solid fa-clipboard-user"></i>
                    Staff: <span class="bill-lineValue">@ViewBag.EmployeeName.ToUpper()</span>
                </p>
                <p class="bill-line">
                    Service name: <span class="bill-lineValue">@ViewBag.service.ServiceName</span>
                </p>
                <p class="bill-line">
                    Payment plan: <span class="bill-lineValue">@ViewBag.pl.PlanName</span>
                </p>
                <p class="bill-line">
                    Payment plan dtetail: <span class="bill-lineValue">@ViewBag.pld.Content</span>
                </p>
                <p class="bill-line">
                    Connect Quantity: <span class="bill-lineValue">@ViewBag.account.ConnectQuantity</span>
                </p>
                @if (CallChargeHelper.GetCallChargeCount(ViewBag.pld.PaymentPlanDetailID) != 0)
                {
                    <p class="bill-line">
                        Call charges:
                    </p>
                    <ul class="billList">
                        @foreach (eProject.Models.ViewModels.CallCharge.CallChargeViewModel item in CallChargeHelper.GetCallCharge(ViewBag.pld.PaymentPlanDetailID))
                        {
                            <li class="billList-item">
                                @item.CallChargeName: @item.CostPerMinute cents / minute
                            </li>
                        }
                    </ul>
                }
                <p class="bill-line">
                    <i class="fa-solid fa-calendar-days"></i>
                    Create Date:
                    <span class="bill-lineValue">@DateTime.Now.ToString("dd/MM/yyyy")</span>
                </p>
            </div>
            @if (CallChargeHelper.GetCallChargeCount(ViewBag.pld.PaymentPlanDetailID) != 0)
            {
                <div class="bill mt-5">
                    <p class="bill-lineStrong">
                        Call charges
                    </p>

                    <p class="bill-line">
                        Please enter the number of minutes customer called
                    </p>
                    @foreach (eProject.Models.ViewModels.CallCharge.CallChargeViewModel item in CallChargeHelper.GetCallCharge(ViewBag.pld.PaymentPlanDetailID))
                    {
                    <div class="form-group">
                        <label class="form-label">@item.CallChargeName</label>
                        <input value="0" class="form-input callChargeInput" type="number" data-charge="@item.CostPerMinute" />
                    </div>
                    }
                </div>
            }
        </div>

        <div class="col-xl-6">
            <div class="bill">
                @using (Html.BeginForm("Store", "Bill", new { area = "Admin" }, FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(a => a.AccountID)
                    <div class="form-group">
                        @Html.LabelFor(a => a.InitialDueAmount, new { @class = "form-label" })
                        @Html.EditorFor(a => a.InitialDueAmount, new { htmlAttributes = new { @class = "form-input", placeHolder = "Enter initial due amount" } })
                        @Html.ValidationMessageFor(a => a.InitialDueAmount, null, new { @class = "invalidMessage" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(a => a.Discount, new { @class = "form-label" })
                        @Html.EditorFor(a => a.Discount, new { htmlAttributes = new { @class = "form-input", placeHolder = "Enter discount" } })
                        @Html.ValidationMessageFor(a => a.Discount, null, new { @class = "invalidMessage" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(a => a.VatCost, new { @class = "form-label" })
                        @Html.EditorFor(a => a.VatCost, new { htmlAttributes = new { @class = "form-input", placeHolder = "Enter VAT cost" } })
                        @Html.ValidationMessageFor(a => a.VatCost, null, new { @class = "invalidMessage" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(a => a.AmountPaid, new { @class = "form-label" })
                        @Html.EditorFor(a => a.AmountPaid, new { htmlAttributes = new { @class = "form-input", placeHolder = "Enter amount paid" } })
                        @Html.ValidationMessageFor(a => a.AmountPaid, null, new { @class = "invalidMessage" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(a => a.PaidContent, new { @class = "form-label" })
                        @Html.EditorFor(a => a.PaidContent, new { htmlAttributes = new { @class = "form-input", placeHolder = "Enter paid content" } })
                        @Html.ValidationMessageFor(a => a.PaidContent, null, new { @class = "invalidMessage" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(a => a.Paid, new { @class = "form-label" })
                        @Html.EditorFor(a => a.Paid, new { htmlAttributes = new { @class = "form-check" } })
                        @Html.ValidationMessageFor(a => a.Paid, null, new { @class = "invalidMessage" })
                    </div>
                    <button class="form-btn">
                        Generate
                    </button>
                }
            </div>
        </div>
    </div>
</div>